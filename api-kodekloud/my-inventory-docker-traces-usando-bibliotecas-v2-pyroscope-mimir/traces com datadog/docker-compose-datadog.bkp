services:
  app:
    build: .
    image: inventory_app:v3.1
    container_name: inventory-app-telemetry
    ports:
      - "10000:10000" # Expondo a porta da aplicação
      - "2113:2113" # Expondo a porta de métricas
    depends_on:
      mysql:
        condition: service_healthy # Aguarda o MySQL estar pronto
      otel-collector: #Adicionando dependencia ao collector
        condition: service_started
    environment:
      DB_USER: root
      DB_PASSWORD: admin
      DB_NAME: inventory
      DB_HOST: mysql
    networks:
      - my-network

  mysql:
    image: mysql:8.0
    container_name: mysql-container
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: admin
      MYSQL_DATABASE: inventory
      MYSQL_LOG_ERROR_VERBOSITY: 3 # nivel INFO de log
      MYSQL_DEBUG: d:t:o,file:stdout # Ativa o log de depuração
    ports:
      - "0:3306" #Deixo para o docker escolher a porta livre.
    volumes:
      - mysql_data:/var/lib/mysql
      - type: bind
        source: ./docker-entrypoint-initdb.d/setup.sh
        target: /docker-entrypoint-initdb.d/setup.sh
        read_only: true
    healthcheck: # Garante que o MySQL esteja pronto antes do app iniciar
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      retries: 5
      start_period: 10s
    networks:
      - my-network

  otel-collector:
    image: otel/opentelemetry-collector-contrib
    container_name: otel-collector
    environment:
      DD_API_KEY_GO_LAB: "${DD_API_KEY_GO_LAB}" # Vai pegar do arquivo .env
    volumes:
      - ./otel-collector-config.yaml:/etc/otelcol-contrib/config.yaml
    ports:
      - 1888:1888 # pprof extension
      - 8888:8888 # Prometheus metrics exposed by the Collector
      - 8889:8889 # Prometheus exporter metrics
      - 13133:13133 # health_check extension
      - 4317:4317 # OTLP gRPC receiver
      - 4318:4318 # OTLP http receiver
      - 55679:55679 # zpages extension
    networks:
      - my-network

volumes:
  mysql_data:

networks:
  my-network:
    driver: bridge
