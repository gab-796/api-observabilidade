extensions:
  docker_observer:
    endpoint: "unix:///var/run/docker.sock"

receivers:
  otlp: # Saída de traces da app em Go --> OpenTelemetry Collector
    protocols:
      grpc:
        endpoint: otel-collector:4317 # Especifica o endereço e porta para o receptor gRPC da App em Go para enviar traces pro OtelCollector.
  prometheus: # Métricas saindo da app Go para o Mimir, via otel collector.
    config:
      scrape_configs:
        - job_name: 'inventory-app'
          static_configs:
            - targets: ['app:2113']
  # Receiver principal para logs dos containers Docker via otel collector.
  #filelog: # Usando o OtelCollector para ler logs do Docker e enviar para o Loki. Fallback é o promtail.
  #  include:
  #    - /var/lib/docker/containers/*/*.log
  #  start_at: end
  #  max_log_size: 1MiB
  #  operators:
  #    - type: json_parser
  #      parse_from: body
  #      timestamp:
  #        parse_from: attributes.time
  #        layout: '%Y-%m-%dT%H:%M:%S.%LZ'
  #    - type: move
  #      from: attributes.log
  #      to: body

#processors:
#  batch:
#    send_batch_size: 10    # Reduzir o tamanho do batch
#    timeout: 5s             # Enviar mais frequentemente
#    send_batch_max_size: 50 # Limite máximo
#  transform:
#    log_statements:
#      - context: log
#        statements:
#        - 'set(attributes["service.name"], "docker-logs")'
#        - 'set(attributes["container.id"], resource.attributes["log.file.name"]) where resource.attributes["log.file.name"] != nil'

exporters:
  otlp/tempo: # Configurações de saída de traces (otelCollector --> Tempo)
    endpoint: tempo:4317 # Otelcollector vai pegar os traces e enviar para esse endereço, com o serviço tempo e porta configurada na config do Tempo para receber esses dados. Configurado no main.go
    #otlphttp/tempo:
    #  endpoint: http://tempo:4318 # Para usar otelhttp, vc deverá refatorar o código GO para dar suporte a isso.
    tls:
      insecure: true # https://github.com/grafana/tempo/blob/main/example/docker-compose/otel-collector/otel-collector.yaml
  prometheusremotewrite: # Endereço de métricas de saída do otelcollector para o endpoint de remote write do Mimir.
    endpoint: "http://mimir:9009/api/v1/push"
  #loki:
  #  endpoint: "http://loki:3100/loki/api/v1/push"
  #  tls:
  #    insecure: true
  #  sending_queue:
  #    enabled: true
  #    num_consumers: 2
  #    queue_size: 500
  #  retry_on_failure:
  #    enabled: true
  #    initial_interval: 2s
  #    max_interval: 60s
  #    max_elapsed_time: 600s
  #  timeout: 60s

service:
  #extensions: [docker_observer]
  telemetry:
    logs:
      level: "warn"
  pipelines:
    traces/tempo:
      receivers: [otlp]
      exporters: [otlp/tempo]
      #exporters: [otlphttp/tempo]
    metrics: # Adicionando a pipeline de metricas pro Mimir.
      receivers: [prometheus]
      exporters: [prometheusremotewrite]
    #logs:
    #  receivers: [filelog]
    #  processors: [batch, transform]
    #  exporters: [loki] # (Opcional: adicione 'logging' para debug no console, ex: [loki, logging])